#include "colors.inc"#declare RConnect = 0;#declare RLogout = 1;#declare RDisconnect = 2;#declare RPing = 3;#declare RUnlink = 4;#declare RClearScroll = 5;#declare RSettings = 6;#declare RHistFirst = 7;#declare RHistPrev = 8;#declare RHistNext = 9;#declare RHistLast = 10;#declare RLast = 11;// -------background { White }light_source { <0, 30, -15> White * 0.6 }light_source { <-10, -15, -15> White * 0.6 }global_settings { ambient_light White * 3 }// ----------------------------------------#declare RCyl = 0.5;#declare RCylLen = 1.65;#declare RConeBase = 0.8;#declare RConeLen = 1.7;#declare RTotalLen = RCylLen + RConeLen;#macro Icon()#switch (Rendering)#range (RConnect, RUnlink)union {  cylinder {    y*-RCylLen, y* RCylLen, RCyl  }  cone {    y*RCylLen, RConeBase, y*(RCylLen + RConeLen), 0  }  #if (Rendering != RLogout)  cone {    y*-RCylLen, RConeBase, y*-(RCylLen + RConeLen), 0  }  #end  texture {    pigment {      #switch (Rendering)        #case (RConnect)          color Green          #break        #case (RLogout)          color Red          #break        #case (RDisconnect)          gradient y          color_map {            [0 color Clear]            [0.25 color Clear]            [0.7 color Red]            [1 color Red]          }          #break        #case (RPing)          gradient y          color_map {            [0 color Magenta]            [0.5 color Magenta]            [0.5 color Green]            [1 color Green]          }          #break        #case (RUnlink)          color rgbt <0, 0, 0, 0.5>          #break        #else          color Gray          #break      #end      scale RTotalLen * 2      translate y * RTotalLen    }    finish {      specular 1    }  }    no_shadow  rotate x * 45  rotate z * -45}#break#case (RClearScroll)  #declare BoxRad = 1;  #declare BoxDist = 2;  #declare BoxThick = 0.3;  box {    <-BoxRad, -BoxDist, -BoxThick >, <BoxRad, BoxDist, BoxThick>    rotate x * 70    rotate y * -28    no_shadow    pigment { color Pink * 2 }  }#break#case (RSettings)  #declare pX = -1;  #declare pQ = 0.40;  union {    #while (pX <= 1)      #declare pY = -1;      #while (pY <= 1)        #debug concat("X ",str(pX,5,0)," Y ",str(pY,5,0),"\n")        box {          <pX-pQ, pY-pQ, -pQ>, <pX+pQ, pY+pQ, +pQ>          pigment { color rgb <0.5+pX/2, 0.5+pY/2, 0> }        }        #declare pY = pY + 1;      #end      #declare pX = pX + 1;    #end    scale 1    rotate x * -0  }#break#range (RHistFirst, RHistLast)  #declare N = 1 + (Rendering = RHistFirst | Rendering = RHistLast);  #declare S = 0;  #while (S < N)    cone {      y*(-1+S-(N-1)/2), 2, y*(1+S-(N-1)/2), 0      texture { pigment { color Gray } finish { specular 1 } }      #if (Rendering >= RHistNext)      rotate z * 180      #end      no_shadow    }    #declare S = S + 1;  #end#break#end#end// -----#declare SingleIcon = 1;#declare IconCount = (SingleIcon ? 1 : RLast);camera {  right x / IconCount  orthographic  scale 4  location <0, 0, -20>  look_at <0, 0, 0>}#if (SingleIcon) // animation/preview strip switch  #declare Rendering = floor(clock + 0.25);  Icon()#elseunion {  #declare Rendering = RConnect;  #while (Rendering < RLast)    union {      Icon()      translate y * -4 * Rendering    }    #declare Rendering = Rendering + 1;  #end  translate y* (2*IconCount - 2)  scale 1/IconCount}#end// end